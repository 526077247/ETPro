syntax = "proto3";
package ET;

//ResponseType ObjectQueryResponse
message ObjectQueryRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
	int64 InstanceId = 2;
}

//ResponseType A2M_Reload
message M2A_Reload // IActorRequest
{
	int32 RpcId = 90;
}

message A2M_Reload // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType G2G_LockResponse
message G2G_LockRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Id = 1;
	string Address = 2;
}

message G2G_LockResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType G2G_LockReleaseResponse
message G2G_LockReleaseRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Id = 1;
	string Address = 2;
}

message G2G_LockReleaseResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType ObjectAddResponse
message ObjectAddRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
	int64 InstanceId = 2;
}

message ObjectAddResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType ObjectLockResponse
message ObjectLockRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
	int64 InstanceId = 2;
	int32 Time = 3;
}
message ObjectLockResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType ObjectUnLockResponse
message ObjectUnLockRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
	int64 OldInstanceId = 2;
	int64 InstanceId = 3;
}
message ObjectUnLockResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType ObjectRemoveResponse
message ObjectRemoveRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
}
message ObjectRemoveResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType ObjectGetResponse
message ObjectGetRequest // IActorRequest
{
	int32 RpcId = 90;
	int64 Key = 1;
}
message ObjectGetResponse // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;

	int64 InstanceId = 1;
}

//ResponseType G2R_GetLoginKey
message R2G_GetLoginKey // IActorRequest
{
	int32 RpcId = 90;
	string Account = 1;
}

message G2R_GetLoginKey // IActorResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;

	int64 Key = 1;
	int64 GateId = 2;
}

message M2M_UnitTransferResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 NewInstanceId = 4;
}

message M2M_UnitAreaTransferResponse //  IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 NewInstanceId = 4;
}

message M2M_UnitAreaRemove // IActorLocationMessage
{
	int32 RpcId = 1;
	int64 UnitId = 2;
}

message G2M_SessionDisconnect // IActorLocationMessage
{
	int32 RpcId = 90;
}

message M2M_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 90;
	int64 Id = 1;

	float X = 2;
	float Y = 3;
	float Z = 4;

	repeated float Xs = 5;
	repeated float Ys = 6;
	repeated float Zs = 7;
}

message M2M_Stop // IActorLocationMessage
{
	int32 RpcId = 90;
	int32 Error = 1;

	int64 Id = 2;
	float X = 3;
	float Y = 4;
	float Z = 5;

	float A = 6;
	float B = 7;
	float C = 8;
	float W = 9;
}

message M2M_UseSkill // IActorLocationMessage
{
	int32 RpcId = 90;
	int32 Error = 1;
	int32 SkillConfigId = 2;
	int64 Sender = 3;
	int64 Reciver = 4;
	float X = 5;
	float Y = 6;
	float Z = 7;
}

message M2M_AddBuff // IActorLocationMessage
{
	int32 RpcId = 90;
	int32 Error = 1;
	int32 ConfigId = 2;
	int64 Timestamp = 3;
	int64 UnitId = 4;
	int64 SourceId = 5;
}

message M2M_Damage // IActorLocationMessage
{
	int32 RpcId = 90;
	int32 Error = 1;
	int64 FromId = 2;
	int64 ToId = 3;
	int64 Damage = 4;
	int64 NowBase = 5;
}